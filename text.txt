#include <stdio.h>
#include <stdlib.h>


// AVL Tree Node Structure
typedef struct Node {
    int key;
    struct Node *left;
    struct Node *right;
    int height;
} Node;


// Function to get height of a node
int getHeight(Node *node) {
    if (node == NULL)
        return 0;
    return node->height;
}


// Function to get maximum of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}


// Function to create a new node
Node* createNode(int key) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->key = key;
    newNode->left = NULL;
    newNode->right = NULL;
    newNode->height = 1; // new node is initially added at leaf
    return newNode;
}


// Function to get balance factor of a node
int getBalance(Node *node) {
    if (node == NULL)
        return 0;
    return getHeight(node->left) - getHeight(node->right);
}


// Function to update height of a node
void updateHeight(Node *node) {
    if (node != NULL) {
        node->height = 1 + max(getHeight(node->left), getHeight(node->right));
    }
}


// ROTATION FUNCTIONS


// Right rotation
Node* rightRotate(Node *y) {
    /*
        y                              x
       / \                           /   \
      x   T3      ->                T1    y
     / \                               / \
    T1  T2                            T2  T3
    */
    
    Node *x = y->left;
    Node *T2 = x->right;
    
    // Perform rotation
    x->right = y;
    y->left = T2;
    
    // Update heights
    updateHeight(y);
    updateHeight(x);
    
    return x;
}


// Left rotation
Node* leftRotate(Node *x) {
    /*
        x                              y
       / \                           /   \
      T1  y      ->                 x     T3
         / \                       / \
        T2  T3                    T1  T2
    */
    
    Node *y = x->right;
    Node *T2 = y->left;
    
    // Perform rotation
    y->left = x;
    x->right = T2;
    
    // Update heights
    updateHeight(x);
    updateHeight(y);
    
    return y;
}


// INSERTION FUNCTIONS


Node* insert(Node* node, int key) {
    // Step 1: Perform normal BST insertion
    if (node == NULL)
        return createNode(key);
    
    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else
        return node; // Duplicate keys not allowed
    
    // Step 2: Update height of current node
    updateHeight(node);
    
    // Step 3: Get balance factor
    int balance = getBalance(node);
    
    // Step 4: Check and perform rotations if needed
    
    // Left Left Case
    if (balance > 1 && key < node->left->key)
        return rightRotate(node);
    
    // Right Right Case
    if (balance < -1 && key > node->right->key)
        return leftRotate(node);
    
    // Left Right Case
    if (balance > 1 && key > node->left->key) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }
    
    // Right Left Case
    if (balance < -1 && key < node->right->key) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }
    
    return node;
}


// DELETION FUNCTIONS


// Find node with minimum key value
Node* minValueNode(Node* node) {
    Node* current = node;
    while (current->left != NULL)
        current = current->left;
    return current;
}


Node* deleteNode(Node* root, int key) {
    // Step 1: Perform standard BST delete
    if (root == NULL)
        return root;
    
    if (key < root->key)
        root->left = deleteNode(root->left, key);
    else if (key > root->key)
        root->right = deleteNode(root->right, key);
    else {
        // Node to be deleted found
        
        // Cases: 0 or 1 child
        if (root->left == NULL) {
            Node* temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            Node* temp = root->left;
            free(root);
            return temp;
        }
        
        // Case: 2 children - get inorder successor
        Node* temp = minValueNode(root->right);
        root->key = temp->key;
        root->right = deleteNode(root->right, temp->key);
    }
    
    // If tree had only one node
    if (root == NULL)
        return root;
    
    // Step 2: Update height
    updateHeight(root);
    
    // Step 3: Get balance factor
    int balance = getBalance(root);
    
    // Step 4: Check and perform rotations if needed
    
    // Left Left Case
    if (balance > 1 && getBalance(root->left) >= 0)
        return rightRotate(root);
    
    // Left Right Case
    if (balance > 1 && getBalance(root->left) < 0) {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }
    
    // Right Right Case
    if (balance < -1 && getBalance(root->right) <= 0)
        return leftRotate(root);
    
    // Right Left Case
    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }
    
    return root;
}


// TRAVERSAL FUNCTIONS


void inorderTraversal(Node* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->key);
        inorderTraversal(root->right);
    }
}


void preorderTraversal(Node* root) {
    if (root != NULL) {
        printf("%d ", root->key);
        preorderTraversal(root->left);
        preorderTraversal(root->right);
    }
}


void postorderTraversal(Node* root) {
    if (root != NULL) {
        postorderTraversal(root->left);
        postorderTraversal(root->right);
        printf("%d ", root->key);
    }
}


// SEARCH FUNCTION


Node* search(Node* root, int key) {
    if (root == NULL || root->key == key)
        return root;
    
    if (key < root->key)
        return search(root->left, key);
    else
        return search(root->right, key);
}


// TREE VISUALIZATION


void printTree(Node* root, int space) {
    if (root == NULL)
        return;
    
    // Increase distance between levels
    space += 10;
    
    // Process right child first
    printTree(root->right, space);
    
    // Print current node after space
    printf("\n");
    for (int i = 10; i < space; i++)
        printf(" ");
    printf("%d\n", root->key);
    
    // Process left child
    printTree(root->left, space);
}


// Check if tree is balanced
int isBalanced(Node* root) {
    if (root == NULL)
        return 1;
    
    int balance = getBalance(root);
    if (abs(balance) > 1)
        return 0;
    
    return isBalanced(root->left) && isBalanced(root->right);
}


// MEMORY MANAGEMENT


void freeTree(Node* root) {
    if (root == NULL)
        return;
    
    freeTree(root->left);
    freeTree(root->right);
    free(root);
}


// DEMONSTRATION AND TESTING


int main() {
    Node* root = NULL;
    
    printf("=== AVL Tree Implementation in C ===\n\n");
    
    // Test insertion
    printf("1. Inserting elements: 10, 20, 30, 40, 50, 25\n");
    int keys[] = {10, 20, 30, 40, 50, 25};
    int n = sizeof(keys)/sizeof(keys[0]);
    
    for (int i = 0; i < n; i++) {
        root = insert(root, keys[i]);
        printf("   After inserting %d: ", keys[i]);
        printf("Inorder: ");
        inorderTraversal(root);
        printf("\n");
    }
    
    printf("\n2. Final Tree Structure:\n");
    printTree(root, 0);
    
    printf("\n3. Tree Traversals:\n");
    printf("   Inorder: ");
    inorderTraversal(root);
    printf("\n");
    
    printf("   Preorder: ");
    preorderTraversal(root);
    printf("\n");
    
    printf("   Postorder: ");
    postorderTraversal(root);
    printf("\n");
    
    printf("\n4. Search Operations:\n");
    int searchKeys[] = {25, 35, 40};
    for (int i = 0; i < 3; i++) {
        Node* result = search(root, searchKeys[i]);
        if (result != NULL)
            printf("   Key %d: Found\n", searchKeys[i]);
        else
            printf("   Key %d: Not Found\n", searchKeys[i]);
    }
    
    printf("\n5. Balance Check:\n");
    printf("   Is tree balanced? %s\n", isBalanced(root) ? "Yes" : "No");
    
    // Test deletion
    printf("\n6. Deletion Operations:\n");
    int deleteKeys[] = {30, 10, 25};
    for (int i = 0; i < 3; i++) {
        root = deleteNode(root, deleteKeys[i]);
        printf("   After deleting %d: ", deleteKeys[i]);
        printf("Inorder: ");
        inorderTraversal(root);
        printf("\n");
        printf("   Is balanced? %s\n", isBalanced(root) ? "Yes" : "No");
    }
    
    printf("\n7. Final Tree Structure:\n");
    printTree(root, 0);
    
    // Clean up memory
    freeTree(root);
    
    return 0;
}